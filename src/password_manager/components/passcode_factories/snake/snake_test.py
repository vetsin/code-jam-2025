import pytest
from password_manager.components.passcode_factories.snake.snake_core import Direction, Snake


@pytest.mark.parametrize(
    "size,replay",
    [
        (5, b"*\xa0<\xd6_\x03\xfc\x08\xf0*\xaa"),
        (5, b"\x9a\x03\xf3\xfc \x0fUe\xca"),
        (5, b"\n\xa3\xfc\xff*\x8a\xa3\xfc\xa8?*\x95\xa3\x02\x95|(<\n"),
        (5, b"\xa9\xffj\x9f\xf6\xa9\xffj\x9f\xf6\xa9\xfd\xa9\xff\x00\xaaU\xff*\r\xf0\xa3\x08<\n"),
        (4, b"\x0e\x8f\xca"),
        (4, b"?\xc3\xf5\xa8\xf2\x8f\xca\x8f\xca"),
    ],
)
def test_game(size: int, replay: bytes) -> None:
    # replay moves generated by playing by hand
    Snake.replay_from_bytes(
        # args taken from `snakeinput_factory` on commit fd11ede82682dbc6e2d87d76a5b505ab3ea0dbd5
        directions=replay,
        size=size,
        start=(2, 2),
        direction=Direction.UP,
        seed="TEMP, expose this as arg to user?",
        # log_ticks_with_delay=0.5,
    )


def test_completed_game() -> None:
    # replay moves generated by playing by hand
    Snake.replay_from_bytes(
        # args taken from `snakeinput_factory` on commit fd11ede82682dbc6e2d87d76a5b505ab3ea0dbd5
        directions=b"\rp\xd5\xa8\rp\xd7\x02\xa0\x97\xc2",
        size=4,
        start=(2, 2),
        direction=Direction.UP,
        seed="TEMP, expose this as arg to user?",
        # log_ticks_with_delay=0.5,
    )
